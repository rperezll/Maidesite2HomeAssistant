substitutions:
  name: "maidesite-desk"
  friendly_name: Maidesite Desk
  min_height: "620"
  max_height: "1263"

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  on_boot:
    priority: 800
    then:
      - uart.write: 
          [0xf1, 0xf1, 0x07, 0x00, 0x07, 0x7e, 0xf1, 0xf1, 0x08, 0x00, 0x08, 0x7e,
          0xf1, 0xf1, 0x09, 0x00, 0x09, 0x7e, 0xf1, 0xf1, 0x0c, 0x00, 0x0c, 0x7e,
          0xf1, 0xf1, 0x0e, 0x00, 0x0e, 0x7e]

esp32:
  board: esp32dev
  framework:
    type: esp-idf

logger:
  # level: DEBUG

api:
  encryption:
    key: !secret api_encryption_key

ota:
  platform: esphome
  password: !secret ota_password

improv_serial:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

bluetooth_proxy:
  active: true

uart:
  - id: maidesite_uart
    tx_pin: 26
    rx_pin: 27
    baud_rate: 9600
    # debug:
    #   direction: BOTH
    #   dummy_receiver: false
    #   after:
    #     delimiter: "\n"
    #   sequence:
    #     - lambda: UARTDebug::log_string(direction, bytes);

globals:
  - id: desk_switch_state
    type: bool
    restore_value: no
    initial_value: "false"
  - id: last_height
    type: float
    initial_value: "0.0"
  - id: height_timer
    type: int
    initial_value: "0"

# external_components:
#   - source:
#       type: local
#       path: components

external_components:
  - source: github://rperezll/Maidesite2HomeAssistant@main
    components: [ desk_control ]

desk_control:
  uart_id: maidesite_uart
  height_slider: height_slider
  sensor_m1: sensor_m1
  sensor_m2: sensor_m2
  sensor_m3: sensor_m3
  sensor_m4: sensor_m4

sensor:
  - platform: template
    name: "Time at Current Height"
    id: time_at_current_height
    unit_of_measurement: "s"
    icon: "mdi:timer"
    accuracy_decimals: 0
    update_interval: 0.5s
    lambda: |-
      return id(height_timer);

  - platform: template
    name: "Current Height"
    id: desk_height
    unit_of_measurement: "cm"
    accuracy_decimals: 1
    icon: "mdi:arrow-up-down"
    update_interval: 0.5s
    lambda: |-
      return id(height_slider).state / 10.0;

  - platform: template
    name: "Sitting Position"
    id: "sensor_m1"
    icon: "mdi:seat-recline-normal"
    filters:
      - lambda: !lambda |-
          if (x < 1) {
            return {};
          }
          return x / 10;

  - platform: template
    name: "Standing Position"
    id: "sensor_m2"
    icon: "mdi:human-male"
    filters:
      - lambda: !lambda |-
          if (x < 1) {
            return {};
          }
          return x / 10;

  - platform: template
    name: "Custom Position 1"
    id: "sensor_m3"
    icon: "mdi:human-male-height-variant"
    filters:
      - lambda: !lambda |-
          if (x < 1) {
            return {};
          }
          return x / 10;
          
  - platform: template
    name: "Custom Position 2"
    id: "sensor_m4"
    icon: "mdi:human-male-height-variant"
    filters:
      - lambda: !lambda |-
          if (x < 1) {
            return {};
          }
          return x / 10;

text_sensor:
  - platform: template
    name: "Height Status"
    id: height_status
    icon: "mdi:human-male-female"
    update_interval: 10s
    lambda: |-
      float current_height = id(height_slider).state / 10.0;
      if (current_height >= 70.0 && current_height <= 80.0) {
        return std::string("Sitting");
      } else if (current_height >= 115.0 && current_height <= 125.0) {
        return std::string("Standing");
      } else {
        return std::string("Other");
      }

switch:
  - platform: template
    name: "Desk enabled"
    id: desk_enabled
    lambda: return id(desk_switch_state);
    turn_on_action:
      - logger.log: "ðŸŸ¢ La mesa estÃ¡ operativa esperando ordenes."
      - globals.set:
          id: desk_switch_state
          value: "true"
    turn_off_action:
      - logger.log: "ðŸ”´ La mesa estÃ¡ bloqueada y no operativa."
      - globals.set:
          id: desk_switch_state
          value: "false"

button:

  - platform: template
    name: Up
    id: button_up
    icon: "mdi:arrow-up-bold"
    on_press:
      if:
        condition:
          switch.is_on: desk_enabled
        then:
          - logger.log: "âš¡ UP"
          - uart.write: [0xf1, 0xf1, 0x01, 0x00, 0x01, 0x7e]

  - platform: template
    name: Down
    id: button_down
    icon: "mdi:arrow-down-bold"
    on_press:
      if:
        condition:
          switch.is_on: desk_enabled
        then:
          - logger.log: "âš¡ DOWN"
          - uart.write: [0xf1, 0xf1, 0x02, 0x00, 0x02, 0x7e]

  - platform: template
    name: Sitting position
    id: button_sit
    icon: "mdi:seat-recline-normal"
    on_press:
      if:
        condition:
          switch.is_on: desk_enabled
        then:
          - logger.log: "âš¡ PosiciÃ³n sentado"
          - uart.write: [0xf1, 0xf1, 0x05, 0x00, 0x05, 0x7e]

  - platform: template
    name: Stand position
    id: button_stand
    icon: "mdi:human-male"
    on_press:
      if:
        condition:
          switch.is_on: desk_enabled
        then:
          - logger.log: "âš¡ PosiciÃ³n de pie"
          - uart.write: [0xf1, 0xf1, 0x06, 0x00, 0x06, 0x7e]
          
  - platform: template
    name: Test
    id: button_test
    disabled_by_default: True
    icon: "mdi:test-tube"
    on_press:
      then:
        - logger.log: "ðŸ§ª Test desk"
        - uart.write: 
            [0xf1, 0xf1, 0x07, 0x00, 0x07, 0x7e, 0xf1, 0xf1, 0x08, 0x00, 0x08, 0x7e,
            0xf1, 0xf1, 0x09, 0x00, 0x09, 0x7e, 0xf1, 0xf1, 0x0c, 0x00, 0x0c, 0x7e,
            0xf1, 0xf1, 0x0e, 0x00, 0x0e, 0x7e]

number:
  - platform: template
    name: "Desk Height Control"
    id: height_slider
    step: 1
    min_value: ${min_height}
    max_value: ${max_height}
    mode: SLIDER
    set_action:
      if:
        condition:
          switch.is_on: desk_enabled
        then:
          - delay: 100ms 
          - uart.write: !lambda |-
              int val = (int)round(x);  // redondea el valor recibido
              uint8_t a = static_cast<uint8_t>(val & 0xff);
              uint8_t b = static_cast<uint8_t>((val >> 8) & 0xff);
              uint8_t c = static_cast<uint8_t>((a + b + 0x80 + 0x02) & 0xff);
              return {0xf1, 0xf1, 0x80, 2, b, a, c, 0x7e, 0xf1, 0xf1, 0x1b, 0x00, 0x1b, 0x7e};

interval:
  - interval: 1s
    then:
      - lambda: |-
          float current_height = id(height_slider).state;
          if (current_height == id(last_height)) {
            id(height_timer)++;
          } else {
            id(height_timer) = 0;
            id(last_height) = current_height;
          }